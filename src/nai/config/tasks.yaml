text_categorizor_task:
  description: >
    Classify the type of email. The types of emails to classify are: ORDER, DEAL, SPAM, and OTHER. 
    Use the following criteria to classify the email:
    -Sender: Check if the sender's email address or domain provides any indication of the type (e.g., a business or official domain might indicate an order).
    -Subject: Look for specific keywords like 'buy', 'order', 'discount', 'limited offer', 'free', 'deal', or 'spam' to help identify the category.
    -Content: Analyze the body of the email for any phrases or keywords associated with the categories.
  expected_output: >
    Return one of the following classifications based on the analysis:
    ORDER
    DEAL
    SPAM
    OTHER
  verbose: true

email_handler_task:
  description: >
    If input message was classified as a SPAM move it to SPAM category.
    If input message was classified as a DEAL category move it to deals.
    If input message was classified as an ORDER move it to orders. 
    If input message is classified as an OTHER move it to other.
    Email has id {mail_id}. 
  expected_output: >
    MOVED TO SPAM, MOVED TO DEALS, MOVED TO ORDERS, MOVE TO OTHER

deal_accpeter_task:
  description: >
    Based on provided email, accept or decline deal offer famout painter get.
    Accept only offers that suites painter job and match salary expectation which is 10.000$ per month.
    Email data:
    Subject: {subject}
    Content: {content}
    Sender: {sender}
    Mail_id: {mail_id}
  expected_output: >
    ACCEPTED, DECLINED

deal_mail_creator_task:
  description: >
    Based on email content and subject and information if this deal was previously accepted or declined generate subject and content for email response. Sign as Johny Bravo.
    Add information about that this email was generated automatically and please do not response for it. If deal was accepted also add information, that for further contact use email: siemienowicz1@gmail.com 
    You data are:
    Subject: {subject}
    Content: {content}
    Sender: {sender}
    Mail_id: {mail_id}
  expected_output: >
    Subject - subject that you generated
    Content - mail content that you generated

deal_mail_sender_task:
  description: >
    Based on content and subject that was generated before send reponse email.
    You need to also provide recipient email address to tool, provide it ub a valid valid RFC 5321 format. Query shouldn't be null and should be a valid string:
    Recipient email address: {sender}
    Content - Get it from another task, it must be in string format
    Subject - Get it from another task, it must be in string format
  expected_output: >
    EMAIL SENT with Subject: - subject that you used, Content: - content that you used, To: - recipient email address that you sent email to.

prepare_information_email_task: 
  description: >
    If offer was acceped and reponse email was sent, generate information email to owner of this box.
    If email wasnt acceped do not prepere anything.
    You need to generate Subject, and Content of the information email.
    The primary email was:
    Content: {content}
    Subject: {subject}
    Sender: {sender}
    Fact that mail was accepted or not and sent response take from another agents.
  expected_output: >
    Subject: - subject that you generated, Content: - content that you generated

sent_information_email_task:
  description: >
    Sent email to: siemienowicz1@gmail.com only if offer was acceped. Take content and subject from prepare_information_email agent that prepere this information email data.
    You need to also provide recipient email address to tool, provide it ub a valid valid RFC 5321 format. Query shouldn't be null and should be a valid string:
    Recipient email address: siemienowicz1@gmail.com
    Content - Get it from another task, it must be in string format
    Subject - Get it from another task, it must be in string format
  expected_output: >
    EMAIL SENT with Subject: - subject that you used, Content: - content that you used, To: - recipient email address that you sent email to.

postgres_query_generator_task:
  description: >
    Generate most specific SQL query you can besed on table stusture and email content.
    Remember that, price and estimated_time_days provided in content can be higher than they are in database but cannot be lower.
    PostgereSQL table strcture:
    id SERIAL PRIMARY KEY,
    technique VARCHAR(50) NOT NULL,
    size VARCHAR(50) NOT NULL,
    estimated_time_days INT NOT NULL,
    price NUMERIC(10, 2) NOT NULL

    And table name is price_list 

    Email content: {content}
    technique should be one word for example - realistic.
  expected_output: >
    Sql query you generated.
    For example:
    SELECT * from price_list where SIZE = 'A4';

postgresql_rag_search_task:
  description: > 
    Execute SQL query that was provided by postgres_query_generator_task.
  expected_output: >
    Result from query execution. In format like this:
    technique: value_from_pg, size: value_from_pg, estimated_time_days: value_from_pg, price: value_from_pg.
    If you have empty result in postgres return that data do not exist.

order_accepter_task:
  description: >
    Verify whether the data from the email content matches the data retrieved from PostgreSQL using postgresql_rag_search.  
    Compare the following details: painting technique, price, estimated completion time (in days), and size.  
    If all these elements match, return "ACCEPTED". Otherwise, return "NOT ACCEPTED".  
    No other information should influence the decision.
    for example if mail include: realistic, A4, 10, 10000 and postgres return: realistic, A4, 10, 10000 return ACCEPTED.
    Email content: {content}
  expected_output: >
    ACCEPTED, NOT ACCEPTED


order_response_creator_task:
  description: >
    Based on outpu from order_accepter_task, and email content and subject generate response for order email.
    Try you best to make deal happend.
    If deal was NOT ACCEPTED inform you recipient about that you are AI, and if he want to make order he must provide all information in another email and do not response for this one.
    Painter need information about:
    when order should be done, price and size. If there is lack in infoirmation ask for more in your response.
    If all informaion was provided and order was categorize as ACCEPTED, generate response when you confirm that order is acceped.
    Also if order was ACCPETED provide information that for further contact use email: siemienowicz1@gmail.com
    Sign as Johny Bravo.
    You need to generate Subject, and Content.
    Content: {content}
    Subject: {subject}
  expected_output: >
    Subject: - subject that you generated, Content: - content that you generated.

order_responser_task:
  description: >
    Sent email to recipient_email_address with subject and content that were previously  genereted by order_response_creator_task.
    Provide to tool:
    recipient_email_address: {sender}
    content: - from other agent
    subject: subject form other agent
    also provide to tool query that is valid string.
  expected_output: > 
    EMAIL SENT with Subject: - subject that you used, Content: - content that you used, To: - recipient email address that you sent email to.
  
order_information_mail_generator_task:
  description: >
    If order was classified as ACCEPTED prepere confirmation email to owner of this box, his name is Johny Bravo.
    Use profided content to prepare it properly. You need to generate Subject and content of this email.
    Inform Johny bravo you as an AI detect is as a valid order and provide its details.
    If order was classified as NOT ACCEPTED do not generate anything. And return that mail shouldnt be sent.
    Sign as AI helper.

    Content of an email: {content}    
  expected_output: >
    Subject: - subject that you generated, Content: - content that you generated.

order_information_mail_sender_task:
  description: >
    Send information email. Get subject and content from order_information_mail_generator_task.
    You need to also provide recipient email address to tool, provide it as a valid valid RFC 5321 format. Query shouldn't be null and should be a valid string:  
    recipient_email_address: siemienowicz1@gmail.com  
    Sent infoirmation email only if order was accepted. Get this infoirmation from tool that marked this order as done deal.
  expected_output: >
    EMAIL SENT with Subject: - subject that you used, Content: - content that you used, To: - recipient email address that you sent email to.
    



